<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Stata]]></title>
  <link href="http://qtao.com//atom.xml" rel="self"/>
  <link href="http://qtao.com//"/>
  <updated>2013-06-09T16:34:30+08:00</updated>
  <id>http://qtao.com//</id>
  <author>
    <name><![CDATA[Tao]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[cocos2d v2.0源码分析]]></title>
    <link href="http://qtao.com//blog/2013/02/23/cocos2d-v2-dot-0-source/"/>
    <updated>2013-02-23T14:15:00+08:00</updated>
    <id>http://qtao.com//blog/2013/02/23/cocos2d-v2-dot-0-source</id>
    <content type="html"><![CDATA[<h2>Cocos2d中的关键类及继承关系(以下讨论只涉及iOS版本，不考虑mac版)</h2>

<p><code>CCDirector</code>继承自<code>UIViewController</code>类</p>

<p><code>CCNode</code>继承自<code>NSObject</code></p>

<p><code>CCLayer</code>继承自<code>CCNode</code></p>

<p><code>CCScene</code>继承自<code>CCNode</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[expressjs及mongoose入门]]></title>
    <link href="http://qtao.com//blog/2012/10/26/expressjs-mongoose/"/>
    <updated>2012-10-26T12:04:00+08:00</updated>
    <id>http://qtao.com//blog/2012/10/26/expressjs-mongoose</id>
    <content type="html"><![CDATA[<h2>expressjs 调试</h2>

<p>如果使用</p>

<pre><code>$ node app.js
</code></pre>

<p>的方式运行服务，每次更改服务器代码时都需要手动结果程序然后再运行，显然在开发阶段更改代码是很频繁的。使用<code>supervisor</code>帮忙省下这些麻烦，一但文件更改，<code>supervisor</code>将自动加载。</p>

<pre><code>$ sudo npm install supervisor -g
$ supervisor app.js
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ios audio recorder]]></title>
    <link href="http://qtao.com//blog/2012/10/23/ios-audio-recorder/"/>
    <updated>2012-10-23T03:15:00+08:00</updated>
    <id>http://qtao.com//blog/2012/10/23/ios-audio-recorder</id>
    <content type="html"><![CDATA[<p><a href="http://mobileorchard.com/tutorial-detecting-when-a-user-blows-into-the-mic/">参考</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[用NSLogger代替NSLog输出调试信息]]></title>
    <link href="http://qtao.com//blog/2012/10/20/how-to-use-nslogger/"/>
    <updated>2012-10-20T22:03:00+08:00</updated>
    <id>http://qtao.com//blog/2012/10/20/how-to-use-nslogger</id>
    <content type="html"><![CDATA[<h2>安装</h2>

<p>NSLogger分为两部分，<code>LoggerClient</code>和<code>NSLogger Viewer</code>，你的App需要导入前者，后者是一个独立的mac应用，NSLogger所有的调试信息将输出到这个应用中。</p>

<p>安装<code>NSLogger</code>:</p>

<pre><code>$ vim Podfile
pod 'NSLogger', '1.1'

$ pod install
</code></pre>

<p>如果你不了解Pod，可以参考<a href="http://qtao.com//blog/2012/10/15/how-to-use-cocoapods/">这里</a></p>

<h2>编译NSLogger Viewer</h2>

<p>我在第一次编译时，系统出现了这个错误信息:</p>

<pre><code>Code Sign error: The identity '3rd Party Mac Developer Application' doesn't match any valid, non-expired certificate/private key pair in your keychains
</code></pre>

<p>只需将<code>Build Settings</code> => <code>Code Signing Identity</code> 设置为<code>Don't Code Sign</code>。</p>

<p>编译通行过后会在项目的<code>Products</code>生成一个<code>NSLogger.app</code>的文件，只须把该文件拷贝到应用目录即可。</p>

<h2>使用NSLogger</h2>

<p>在需要用到NSLogger的程序导入<code>LoggerClient.h</code>头文件，一般可在<code>ProjectName_Prefix.pch</code>文件导入:</p>

<pre><code>#import "LoggerClient.h"
</code></pre>

<p>现在可以用<code>LogMessage</code>等函数来代替<code>NSLog</code>了，更简单的方法是编写一个宏:</p>

<pre><code>#define NSLog(...) LogMessageF( \
        __FILE__,           \
        __LINE__,           \
        __FUNCTION__,       \
        nil, 0,             \
        __VA_ARGS__)
</code></pre>

<p>这样，你所有使用<code>NSLog</code>的地方将自动被<code>LogMessageF</code>取代。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS应用使用QQ、新浪微博为第三方登录]]></title>
    <link href="http://qtao.com//blog/2012/10/19/ios-app-login-by-qq-tencentoauth/"/>
    <updated>2012-10-19T01:49:00+08:00</updated>
    <id>http://qtao.com//blog/2012/10/19/ios-app-login-by-qq-tencentoauth</id>
    <content type="html"><![CDATA[<p>QQ登录SDK最重要的两个类分别为:<code>TencentOAuth</code>和<code>TencentRequest</code>，前者用于向服务器请求登录，后者用于包含请求信息。目前QQ登录在移动应用还没有采用SSO方式，未来应该会跟进。</p>

<p>在<code>ControllerView</code>类中声明一个类型为<code>TencentOAuth</code>的实例变量，并在<code>- (void)viewDidLoad</code>方法中初始化：</p>

<pre><code>_tencentOAuth = [[TencentOAuth alloc] initWithAppId: @"your app id" andDelegate: self];
</code></pre>

<p><code>TencentOAuth</code>接受的Delegate为<code>TencentSessionDelegate</code>类型。所以<code>ControllerView</code>对象必须实现<code>TencentSessionDelegate</code>委托。该委托声明了如下方法:</p>

<pre><code>- (void)tencentDidLogin;
// 登录成功

- (void)tencentDidLogout;
// 已退出

- (void)tencentDidNotLogin: (BOOL);
// 登录失败，一种为用户单击了取消按钮。

- (void)tencentDidNotNetwork;
// 没有网络
</code></pre>

<p>实现上面的所有方法，接下来向服务器发出认证请求</p>

<pre><code>[_tencentOAuth authorize:_permissions inSafari:NO];
</code></pre>

<p><code>_permissions</code>是一个数组，数组的每一项代表用户授权的OpenAPI列表，例如可以发表微博，发表说说等。<code>inSafari</code>是否需要在safari中进行登录，默认为NO;</p>

<h2>Weibo登录</h2>

<p>新浪微博已经采用了SSO登录模式，SSO即<code>Single Sign On</code>，单点登录。在官方库中，<code>SinaWeibo</code>和<code>SinaWeiboRequest</code>是两个最重的类，首先声明一个<code>SinaWeibo</code>实例变量:</p>

<pre><code>SinaWeibo *weiboOAth;
</code></pre>

<p>创建<code>SinaWeibo</code>实例：</p>

<pre><code>weiboOAuth = [[SinaWeibo alloc] initWithAppKey:kAppKey appSecret:kAppSecret appRedirectURI:kAppRedirectURI andDelegate: delegate];
</code></pre>

<p>待续&#8230;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[我最常用的git命令]]></title>
    <link href="http://qtao.com//blog/2012/10/17/my-the-most-commonly-used-git-commands/"/>
    <updated>2012-10-17T12:43:00+08:00</updated>
    <id>http://qtao.com//blog/2012/10/17/my-the-most-commonly-used-git-commands</id>
    <content type="html"><![CDATA[<h2>文件管理</h2>

<p>添加新增文件或已修改文件到暂存</p>

<pre><code>$ git add filename
</code></pre>

<p>有多个文件更改时</p>

<pre><code>$ git add .
</code></pre>

<p>提交更新</p>

<pre><code>$ git commit -m 'msseage'
</code></pre>

<p>有时候我们把一些不需要加入版本控制的文件也加入了git库，如何把库中的文件删除，即又保留本地的文件呢？</p>

<pre><code>$ git rm --cached filename
</code></pre>

<p>如果使用<code>git rm filename</code>的话本地文件也将一并删除.</p>

<p>删除文件之后我们一般都要将该文件名加入<code>.gitignore</code>文件中。可以参考<a href="https://github.com/github/gitignore">gitignore</a>，哪种项目需要忽略哪些文件都已经列出。下载相应的项目类型文件，将文件名改为<code>.gitignore</code>即可。</p>

<h2>库管理</h2>

<p>在本地初始化一个库</p>

<pre><code>$ cd dir
$ git init
</code></pre>

<p>从远程克隆一个库</p>

<pre><code>$ git clone git://github.com/lintide/jekyll
</code></pre>

<p>上面克隆的库是只读的，如果你对该库拥用写权限，可以使用<code>git remote set-url</code>修改上面的远程地址</p>

<pre><code>$ git remote -v
origin git://github.com/lintide/jekyll

$ git remote set-url origin git@github.com:username/jekyll
</code></pre>

<p><code>username</code>是你在<code>github.com</code>的用户名，<code>git@github.com</code>表示采用<code>ssh</code>登录github.com，这样你就不需要每次都输入用户名了。关于<code>ssh</code>登录的配置方法可以参考其它文章。</p>

<p>打标签</p>

<pre><code>$ git tag -a v1.0.0 -m "version 1.0.0"
</code></pre>

<p>显示所有标签</p>

<pre><code>$ git tag
</code></pre>

<p>提交标签不是使用<code>git commit</code>命令，而是</p>

<pre><code>$ git push --tags
</code></pre>

<blockquote><p>边学边用边记，持续更新中&#8230;</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如何编写一个CocoaPods的spec文件]]></title>
    <link href="http://qtao.com//blog/2012/10/16/how-to-create-a-cocoapods-spec-file/"/>
    <updated>2012-10-16T19:04:00+08:00</updated>
    <id>http://qtao.com//blog/2012/10/16/how-to-create-a-cocoapods-spec-file</id>
    <content type="html"><![CDATA[<h2>CocoaPods命令介绍</h2>

<p>在<a href="http://qtao.com//blog/2012/10/15/how-to-use-cocoapods/">上一篇文章</a>中，已经介绍过CocoaPods的几条基本命令。<code>pod setup</code>用于初始化本地第三方库的Spec描述文件，所有的spec文件存都存放在<code>~/.cocoapods</code>目录中。<code>pod install</code>用来安装或删除<code>Podfile</code>文件声明中的第三方依赖库。下面继续介绍其它一些命令。</p>

<pre><code>$ pod list
# 列出所有可用的第三方库
</code></pre>

<p><span></span></p>

<pre><code>$ pod search query
</code></pre>

<p>搜索名称包含<code>query</code>的类库，<code>query</code>可以替换为你想搜索的名字（如<code>json</code>)，不区分大小写。也可以使用<code>pod search --full query</code>命令作更仔细的搜索，该命令不但搜索类库的名称，同时还搜索类库的描述文本，所以搜索速度也相对慢一些。</p>

<p><code>pod list</code>和<code>pod search</code>命令只搜索存在于本地<code>~/.cocoapods</code>文件夹的所有第三方库，并不会连接到远程服务器。如果你要从服务器更新本地第三方库的描述文件，可以:</p>

<pre><code>$ pod repo update master
</code></pre>

<h2>创建自己项目的Podspec描述文件</h2>

<p>CocoaPods还是一个相对年轻的项目，所有的项目的Podspec文件都托管在<a href="https://github.com/CocoaPods/Specs">https://github.com/CocoaPods/Specs</a>。可能有一些库并未收录其中。下面我们通过为<a href="https://github.com/mobileresearch/weibo_ios_sdk_sso-oauth">微博sso认证登录库</a>编写Podspec文件来学习相关的概念。</p>

<p>初始化一个Podspec文件</p>

<pre><code>$ pod spec create weibo_ios_sdk_sso-oauth
</code></pre>

<p>该命令将在本目录产生一个名为<code>weibo_ios_sdk_sso-oauth.podspec</code>的文件。用编辑器打开该文件，里面已经有非常丰富的说明文档。下面我们介绍如何声明第三方库的<code>代码目录</code>和<code>资源目录</code>，还有该第三方库所依赖ios核心框架和第三方库。</p>

<p>去除所有的注释，podspec文件如下所示:</p>

<pre><code>Pod::Spec.new do |s|
  s.name     = 'ADVProgressBar'
  s.version  = '0.0.1'
  s.license  = 'MIT'
  s.summary  = 'Progress Bar Design with Percentage values.'
  s.homepage = 'https://github.com/appdesignvault'
  s.author   = { 'appdesignvault' =&gt; 'appdesignvault' }
  s.source   = { :git =&gt; 'https://github.com/appdesignvault/ADVProgressBar.git', :commit =&gt; 'f17b15c15574d6d101cd5fcfd58239e16e806647' }
  s.platform = :ios  
  s.source_files = 'ADVProgressBar/Classes/*.{h,m}'
  s.resources = "ADVProgressBar/Resources/*.png"
  s.framework = 'UIKit'

  s.requires_arc = true  
end
</code></pre>

<p>其中<code>s.name</code>和<code>s.summary</code>用来声明库的名称和一个简短的说明文档。<code>pod search</code>命令就是根据这两项内容作为搜索文本的。<code>s.homepage</code>声明库的主页，<code>s.version</code>库原代码的版本，<code>s.license</code>所采用的授权版本，<code>s.author</code>库的作者。</p>

<p><code>s.source</code> 声明原代码的地址，以微博sso认证登录库为例，它托管在<a href="https://github.com/mobileresearch/weibo_ios_sdk_sso-oauth">https://github.com/mobileresearch/weibo_ios_sdk_sso-oauth</a>中，在其未尾加上<code>.git</code>扩展名就是库的原代码地址了，所以该行应声明为:</p>

<pre><code>s.source = { :git =&gt; 'https://github.com/mobileresearch/weibo_ios_sdk_sso-oauth.git'}
</code></pre>

<p>对于很多第三方库而言，在发布的时候都会打上一个<code>tag</code>，如版本<code>0.0.1</code>就会打上一个名为<code>v0.0.1</code>的<code>tag</code>，但是weibo_ios_sdk_sso-oauth库还未打上所何<code>tag</code>，我们可以选择一个最新的<code>commit</code>来作为该库0.0.1版的代码。<code>s.source</code>最终如下：</p>

<pre><code>s.source = { :git =&gt; 'https://github.com/mobileresearch/weibo_ios_sdk_sso-oauth.git', :commit =&gt; '68defea78942ecc782ffde8f8ffa747872af226d'}
</code></pre>

<p>以后我们可以根据该库不同的版本创建相应的podspec文件，例如<code>0.0.2</code>，<code>0.1.0</code>等。</p>

<p>让我们在浏览器中看一下weibo_ios_sdk_sso-oauth的目录结构:</p>

<pre><code>--
|
+-- demo
|
+-- src
|
+-- .gitignore
|
+-- README.md
</code></pre>

<p><code>demo</code>目录保存一个示例项目，<code>src</code>才是库的原代码目录。<code>src</code>的目录结构如下:</p>

<pre><code>-- src
    |
    +-- JSONKit
    |
    +-- SinaWeibo
    |
    +-- sinaweibo_ios_sdk.xcodeproj
    |
    +-- SinaWeibo-Prefix.pch
</code></pre>

<p><code>JSONKit</code>目录说明这个库本身依赖于<code>JSONKit</code>第三方库。我们可以在podspec文件中的<code>s.dependency</code>声明段中声明。<code>SinaWeibo</code>目录才是包含所有原代码的目录，我们需要在<code>s.source_files</code>中声明</p>

<pre><code>s.source_files = 'src/SinaWeibo/*.{h,m}'
</code></pre>

<p>前一部分<code>src/SinaWeibo/</code>是一个相对目录，目录的层级关系一定要跟代码库的保持一致。最后一部分<code>*.{h,m}</code>是一个类似正则表达式的字符串，表示匹配所有以<code>.h</code>和<code>.m</code>为扩展名的文件。</p>

<p><code>src/SinaWeibo/</code>目录下还有一个<code>SinaWeibo.bundle</code>目录，该目录存放一些资源文件（如图片等），这些文件并不需要进行编译。可以使用<code>s.resourcs</code>声明</p>

<pre><code>s.resources = "src/SinaWeibo/SinaWeibo.bundle/**/*.png"
</code></pre>

<p>前一部分跟上面相同，<code>**</code>表示匹配所有子目录，<code>*.png</code>表示所有以<code>.png</code>为扩展名的图片文件。</p>

<p>通过查看代码我们知道，<code>weibo_ios_sdk_sso-oauth</code>还依赖一个ios的核心库<code>QuartzCore</code></p>

<pre><code>s.framework = 'QuartzCore'
</code></pre>

<p>在前面我们已经说过，<code>weibo_ios_sdk_sso-oauth</code>库自身也依赖于另外一个第三方库<code>JSONKit</code>，声明如下:</p>

<pre><code>s.dependency 'JSONKit', '~&gt; 1.4'
</code></pre>

<p>这行声明与Podfile文件中的声明类似。</p>

<p>最终的结果如下：</p>

<pre><code>Pod::Spec.new do |s|
  s.name         = "weibo_ios_sdk_sso-oauth"
  s.version      = "0.0.1"
  s.summary  = 'weibo.com sso oauth, 微博sso认证登录功能'
  s.homepage     = "https://github.com/mobileresearch/weibo_ios_sdk_sso-oauth"
  s.license      = 'MIT'
  s.author       = {'mobileresearch' =&gt; 'mobileresearch'}
  s.source       = { :git =&gt; 'https://github.com/mobileresearch/weibo_ios_sdk_sso-oauth.git', :commit =&gt; '68defea78942ecc782ffde8f8ffa747872af226d' }
  s.platform = :ios
  s.source_files = 'src/SinaWeibo/*.{h,m}'
  s.resources = "src/SinaWeibo/SinaWeibo.bundle/**/*.png"
  s.framework  = 'QuartzCore'
  s.dependency 'JSONKit', '~&gt; 1.4'
end
</code></pre>

<p>可以将该spec文件保存到本机的<code>~/.cocoapods/master/</code>目录中仅供自己使用，也可以将其提交到CocoaPods/Specs代码库中。下面我们将其保存到本机中</p>

<pre><code>$ mkdir -p ~/.cocoapods/master/weibo_ios_sdk_sso-oauth/0.0.1
$ cp weibo_ios_sdk_sso-oauth.podspec ~/.cocoapods/master/weibo_ios_sdk_sso-oauth/0.0.1
</code></pre>

<p>是否可以通过搜索找到该库:</p>

<pre><code>$ pod search weibo
</code></pre>

<p>同样在需要依赖于weibo_ios_sdk_sso-oauth这个库的项目，可以将下列添加到项目的Podfile文件中</p>

<pre><code>pod 'weibo_ios_sdk_sso_oauth', '0.0.1'
</code></pre>

<p>保存文件，并用<code>pod install</code>安装weibo_ios_sdk_sso-oauth库。</p>

<p>转载请注明原作者</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用Octopress + github管理blog]]></title>
    <link href="http://qtao.com//blog/2012/10/15/how-to-use-octopress/"/>
    <updated>2012-10-15T02:44:00+08:00</updated>
    <id>http://qtao.com//blog/2012/10/15/how-to-use-octopress</id>
    <content type="html"><![CDATA[<h2>准备</h2>

<p>用Octopress来管理blog是要点耐心的，我就有几次想要放弃，因为涉及的概念很多。当然对于头上顶着hacker这个词的人，再难的困难都能克服。</p>

<p>要使用octopress和github来管理blog，你得懂一点点<code>ruby</code>(jekyll), 并且使用过<code>github</code>,然后还要懂一些<code>git</code>命令，学习<code>Markdown</code>来写文章。就这些，言归正传。(注：如果你输入下列的命令发现该命令未找到的时候，请自行google并安装之，恕不一一介绍)。确保你的系统已经安装了下列程序</p>

<ul>
<li>git</li>
<li>ruby (1.9.3) 和 rvm 和 (bundle)</li>
</ul>


<h2>安装</h2>

<pre><code>$ git clone https://github.com/imathis/octopress.git myblog
</code></pre>

<p>注意，后面的<code>myblog</code>你可以取任何你想要的名称。</p>

<p>让我们来看看这个目录里现在包含了什么:</p>

<pre><code>$ cd myblog
$ ls
</code></pre>

<p>显示如下：</p>

<pre><code>CHANGELOG.markdown  README.markdown     config.rb
Gemfile         Rakefile        config.ru
Gemfile.lock        _config.yml     plugins
</code></pre>

<p>先不用理解这些文件都代表什么意思，继续:</p>

<pre><code>$ bundle install
</code></pre>

<p>安装octopress信赖的ruby库，完成后进行初始化:</p>

<pre><code>$ rake install
</code></pre>

<p>现在看看目录里有哪些文件</p>

<pre><code>$ ls
</code></pre>

<p>显示如下：</p>

<pre><code>CHANGELOG.markdown  Rakefile        plugins
Gemfile         _config.yml     public
Gemfile.lock        config.rb       sass
README.markdown     config.ru       source
</code></pre>

<p>我们看到，系统新增了两个文件夹，<code>public</code>和<code>source</code>。<code>source</code>文件夹就是我们以后工作的目录，<code>source</code>中有个<code>_posts</code>文件夹，这就是保存每一篇blog的地方了；而对于<code>public</code>文件夹，我们不需要直接操作它，它将由系统自动生成。</p>

<p>现在我们可以新增blog了。</p>

<pre><code>$ rake new_post["hello world"]
</code></pre>

<p>这个命令将在 <code>source/_posts/</code>文件夹下生成一个类似<code>yyyy-mm-dd-hello-world.markdown</code>的文件，其中<code>yyyy-mm-dd</code>为系统当前的日期，而扩展名表示这是个<code>Markdown</code>文件。你可以选择你喜欢的文本编辑器来修改这个文件。强烈推荐<code>Sublime Text 2</code>。将下列文本添加到该文件的末尾中，先不管其中的符号代表什么.</p>

<pre><code>## Hello world ##
</code></pre>

<p>来看看我们的成果吧</p>

<pre><code>$ rake preview
</code></pre>

<p>Octopress在本机中开启了一个服务器，打开浏览器看看<a href="http://localhost:4000">http://localhost:4000</a>。一切正常:)</p>

<p>如果你现在打开<code>public</code>这个文件夹，将会看到很多新增的文件。这些文件不需要我们的管理，当然理解它也是有意义的。</p>

<h2>在github中托管blog</h2>

<p>到目前我止，我们的blog仅能在本机中访问，如何将其托管到github中呢？如何使用我们自己的域名呢？让一切看起来就如同我们自己的站点。</p>

<p>如果你要使用自己的域名，github需要一个CNAME文件，进入<code>source</code>文件夹，新建<code>CNAME</code>文件。</p>

<pre><code>$ ch source
$ touch CNAME
</code></pre>

<p>将你的域名写入<code>CNAME</code>文件中，如<code>myblog.com</code>。你还需要到你的域名管理中心中新增一个<code>A Record</code>，并指向<code>207.97.227.245</code>IP。</p>

<p>托管到github中</p>

<pre><code>$ rake setup_github_pages
</code></pre>

<p>系统提示你输入一个形如:<code>git@github.com:username/myblog.com.git</code>,<code>username</code>是你在github.com中注册的用户名，<code>myblog.com.git</code>是你自己在github.com中创建的代码库。输入后按回车确定.</p>

<p>现在再看看我们的文件夹:</p>

<pre><code>$ ls
</code></pre>

<p>系统新增了一个文件夹<code>_deploy</code>，其实这个文件夹本身也是一个git代码库，你可以使用<code>ls -a</code>命令，将看到一个名为<code>.git</code>的文件夹，这个文件夹表示这是个git库（不要修改里面的内容）。
现在可以向github提交我们的网站了.</p>

<pre><code>$ rake generate
$ rake deploy
</code></pre>

<p>如果提示如下错误</p>

<pre><code>## Pushing generated _deploy website
ERROR: Repository not found.
fatal: The remote end hung up unexpectedly
</code></pre>

<p>则说明你还没有在github.com中创建形如<code>myblog.com</code>的代码库，到github中创建之。如果一切正常那么恭喜你:)</p>

<p>使用域名访问是否正常。</p>

<p>让我们回过头来到github.com上看一下<code>myblog.com</code>代码库，如果你仔细观察，将会发现这些新增的代码保存在<code>gh-pages</code>分支中（左上角会显示: <code>branch: gh-pages</code>)。这里的代码其实是我们本地计算机<code>_deploy</code>文件夹中的一份拷贝，还记得我们在上面说过吗<code>_deploy</code>其实也是一个git库。</p>

<p>仅仅托管这个文件夹还是不够的，因为我们自己产生的所有文件将保存在<code>source/_posts</code>文件夹中，而顶级目录<code>myblog</code>下也有我们自己的配置文件。我们想把这些都加入代码库中，因为这样才能真正的获得版本控制的好处。你想对你的文章怎么修改都行，只要你向服务器提交了更改，总可以回退到以前的某一个版本。</p>

<p>那么？要怎么做才合理呢？还是向大师学习吧，<code>Octopress</code>的大师是谁？那就是Octopress自身了，我们到<a href="https://github.com/imathis/octopress">https://github.com/imathis/octopress</a>上看看吧，点击左上角<code>branch: master</code>的向下按钮，你们看到很多个brach的名称，其中就有<code>gh-pages</code>分支，还有<code>master</code>、<code>site</code>等等。点击<code>site</code>这个分支看看。是不是跟我们本地的<code>myblog</code>文件夹很像呢？也有<code>source</code>，<code>plugins</code>,<code>sass</code>等文件夹和<code>_config.yml</code>等配置文件。不过少了两个文件<code>_deploy</code>和<code>public</code>，这两个文件夹恰恰就是我们不需要进行版本控制的，因为<code>_deploy</code>就是我们在<code>gh-pages</code>分支中的代码，而<code>public</code>是用于我们在本地机器预览时用到的。那它是怎么做到的呢？让我们来看看究竟。</p>

<p>进入<code>myblog</code>这个目录,然后</p>

<pre><code>$ ls -a
</code></pre>

<p>哦，好多文件。其中以<code>.</code>开头的是隐藏文件，当使用<code>ls</code>命令时是无法看到。对我们而言，重要的是<code>.git</code>文件夹和<code>.gitignore</code>文件。上面我们说过<code>.git</code>文件夹表明这是个git代码库。<code>.gitignore</code>是用来声明哪些文件或文件夹不需要加入git版本控制中。看看它里面有什么:</p>

<pre><code>$ cat .gitignore
</code></pre>

<p>显示如下：</p>

<pre><code>.bundle
.DS_Store
.sass-cache
.gist-cache
.pygments-cache
_deploy
public
sass.old
source.old
source/_stash
source/stylesheets/screen.css
vendor
node_modules
</code></pre>

<p>里面显示的文件或文件夹都不会出现在git代码库中，其中就有<code>_deploy</code>和<code>public</code>，这些正是我们所需要的。拿来即用。看看当前的代码库的状态：</p>

<pre><code>$ git status
</code></pre>

<p>将显示有哪些文件未加入代码库中，可以使用<code>git add</code>和<code>git commit</code>命令。如果对<code>git</code>不是很理解，建议看<a href="http://rogerdudler.github.com/git-guide/index.zh.html">git简易指南</a></p>

<p>如何将这个代码库也向Octopress一样提交到我们自己的<code>site</code>分支中呢?</p>

<pre><code>$ git remote add origin git@github.com:username/myblog.com.git
</code></pre>

<p><code>git@github.com:username/myblog.com.git</code>必须跟你自己在上面使用的代码库地址一致。</p>

<pre><code>$ git branch -m site
$ git push origin site
</code></pre>

<p>一切正常:),看看github中的代码库，现在是不是有两个分支了呢？<code>gh-pages</code>和<code>site</code>。</p>

<h2>发表blog的流程</h2>

<ol>
<li>用<code>rake new_post["new post name"]</code>命令新建blog文章.</li>
<li>用Sublime Text 2编辑新建的blog.</li>
<li><code>rake preview</code>在本机中预览。</li>
<li><code>rake generate</code>和<code>rake deploy</code>上传到github.com</li>
<li>同时用<code>git add</code>, <code>git commit</code>, 和<code>git push origin site</code> 提交site分支的更改.</li>
</ol>


<p>就这些&#8230;</p>

<h2>参考文档</h2>

<p><a href="http://octopress.org/">octopress</a></p>

<p><a href="http://pages.github.com/">github pages</a></p>

<p><a href="http://mrzhang.me/blog/blog-equals-github-plus-octopress.html">Blog = Github + Octopress</a></p>

<p><a href="http://rogerdudler.github.com/git-guide/index.zh.html">git简易指南</a></p>

<p><a href="http://kyle.xlau.org/posts/blogging-like-a-hacker.html">像黑客一样写博客</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用CocoaPods管理iOS的第三方类库]]></title>
    <link href="http://qtao.com//blog/2012/10/15/how-to-use-cocoapods/"/>
    <updated>2012-10-15T02:44:00+08:00</updated>
    <id>http://qtao.com//blog/2012/10/15/how-to-use-cocoapods</id>
    <content type="html"><![CDATA[<p>iOS第三方类库的管理是一个很麻烦的事，项目信赖的类库和版本很难控制。让<a href="https://github.com/CocoaPods/CocoaPods">CocoaPods</a> 来帮帮我们吧。</p>

<h2>安装</h2>

<p>先确认自己是否安装了ruby的运行环境，若没有则安装之。接着：</p>

<pre><code>$ gem install cocoapods
$ pod setup
</code></pre>

<h2>使用</h2>

<ul>
<li><p>用Xcode新建一个iOS新项目，创建后目录结果如下：（项目名为：App)</p>

<pre><code>  App
    |
    +- App
    |
    +- App.xcodeproj
</code></pre></li>
<li><p>进入顶层App目录</p>

<pre><code>  $ cd ~/App
</code></pre></li>
<li><p>新建一个名为 Podfile 的文件</p>

<pre><code>  $ touch Podfile
  $ vi Podfile
</code></pre>

<p>  输入以下内容，并保存</p>

<blockquote><p>platform :ios</p>

<p>pod &#8216;JSONKit&#8217;,     &#8216;~>1.4&#8217;</p>

<p>pod &#8216;Reachability&#8217;,     &#8216;~>2.0.4&#8217;</p></blockquote>

<pre><code>  $ pod install
</code></pre>

<p>  cocoaPods将自动从服务器中拉取相应的第三方库原代码，将其存放在Pods目录中。</p></li>
<li><p>现在目录结构如下:</p>

<pre><code>  App
    |
    +- App
    |
    +- App.xcodeproj
    |
    +- App.xcworkspace
    |
    +- Podfile
    |
    +- Podfile.lock
    |
    +- Pods
</code></pre>

<p>  其中 <code>Pods</code>目录是一个xcode项目，里面包含所有在Podfile中声明的第三方库代码。<code>App.xcworkspace</code> 为xcode的工作空间文件，以后用这个文件来打开项目。</p>

<pre><code>  $ open App.xcworkspace
</code></pre></li>
<li><p>Podfile.lock 文件记录所有已安装的代码库的描述，文件如下：</p>

<pre><code>  PODS:
  - JSONKit (1.5pre)
  - Reachability (2.0.5)

  DEPENDENCIES:
  - JSONKit (~&gt; 1.4)
  - Reachability (~&gt; 2.0.4)

  SPEC CHECKSUMS:
   JSONKit: a01a22c75f27eae76b4badd55a91c20fe6e86477
   Reachability: 8d29c8365f72967b6decc8d2892a7d5dc6550799
</code></pre>

<p>  不要更改这个文件的内容。如果要添加或者删除代码库，在Podfile文件里增加或删除pod声明就可以了。现在第三方库管理起来是不是方便多了呢？</p></li>
</ul>

]]></content>
  </entry>
  
</feed>
